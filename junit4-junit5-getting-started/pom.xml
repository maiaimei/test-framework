<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>cn.maiaimei.example</groupId>
  <artifactId>junit4-junit5-getting-started</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- This Bill of Materials POM can be used to ease dependency management when referencing multiple JUnit artifacts using Gradle or Maven. -->
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.10.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- https://github.com/junit-team/junit5-samples/blob/main/junit5-migration-maven/pom.xml -->
    <!-- 
    Public API for configuring and launching test plans.
    Only needed to run tests in a version of IntelliJ IDEA that bundles older versions 
    -->
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <scope>test</scope>
    </dependency>
    <!--
    JUnit Jupiter is the API for writing tests using JUnit 5.
    junit-jupiter-api的主要作用如下：
    提供了一套编写测试用例和测试套件的API。
    支持编写各种测试类型的测试，如单元测试、集成测试等。
    提供了注解，如@Test、@BeforeEach、@AfterEach、@BeforeAll、@AfterAll等，用于编写测试代码。
    支持在IDE中运行和调试测试，也支持在构建工具（如Maven或Gradle）中运行测试。
    提供了断言类Assertions，用于在测试中进行断言。
    提供了展示测试结果的模式，可以很容易地与IDE或构建工具集成。 
    -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- JUnit 5的执行引擎，Core package for the JUnit Jupiter test engine. -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- 
    A thin layer on top of JUnit 4 to allow running vintage tests (based on JUnit 3.8 and JUnit 4) 
    with the JUnit Platform launcher infrastructure. 
    -->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- 用于提供JUnit 5参数化测试的能力，JUnit Jupiter extension for running parameterized tests. -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>5.8.2</version>
      <scope>compile</scope>
    </dependency>
    <!-- JUnit 4 -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <!-- Mockito JUnit 5 support -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>4.10.0</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mockito/mockito-inline -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>4.10.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.11</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.22</version>
    </dependency>
    <!-- HikariCP 是一个高性能的 JDBC 连接池组件. for JDK8 -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>4.0.3</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
      </plugin>
      <!-- 用于执行单元测试 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <!-- 是否跳过测试 -->
          <skipTests>false</skipTests>
          <!-- 排除测试类 -->
          <excludes>
            <exclude>**/Base*</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- JaCoCo（Java Code Coverage）是一种分析单元测试覆盖率的工具 -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.11</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
